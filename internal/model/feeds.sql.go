// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package model

import (
	"context"
	"database/sql"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (
    url, is_full_text, item_since, max_items, language
) VALUES (?, ?, ?, ?, ?) RETURNING id, url, is_full_text, item_since, max_items, language
`

type CreateFeedParams struct {
	Url        string
	IsFullText bool
	ItemSince  sql.NullFloat64
	MaxItems   sql.NullInt64
	Language   sql.NullString
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.Url,
		arg.IsFullText,
		arg.ItemSince,
		arg.MaxItems,
		arg.Language,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.IsFullText,
		&i.ItemSince,
		&i.MaxItems,
		&i.Language,
	)
	return i, err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM feeds where id = ?
`

func (q *Queries) DeleteFeed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, id)
	return err
}

const listFeeds = `-- name: ListFeeds :many
SELECT id, url, is_full_text, item_since, max_items, language FROM feeds
`

func (q *Queries) ListFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.IsFullText,
			&i.ItemSince,
			&i.MaxItems,
			&i.Language,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeed = `-- name: UpdateFeed :exec
UPDATE feeds
set url = ?,
is_full_text = ?,
item_since = ?,
max_items = ?,
language = ?
WHERE id = ? RETURNING id, url, is_full_text, item_since, max_items, language
`

type UpdateFeedParams struct {
	Url        string
	IsFullText bool
	ItemSince  sql.NullFloat64
	MaxItems   sql.NullInt64
	Language   sql.NullString
	ID         int64
}

func (q *Queries) UpdateFeed(ctx context.Context, arg UpdateFeedParams) error {
	_, err := q.db.ExecContext(ctx, updateFeed,
		arg.Url,
		arg.IsFullText,
		arg.ItemSince,
		arg.MaxItems,
		arg.Language,
		arg.ID,
	)
	return err
}
