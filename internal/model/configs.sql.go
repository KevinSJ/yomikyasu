// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: configs.sql

package model

import (
	"context"
	"database/sql"
)

const createConfig = `-- name: CreateConfig :one
INSERT INTO configs (
    use_natural_voice, speech_speed, full_text_service_url
) VALUES (
    ?, ?, ?
) RETURNING id, use_natural_voice, speech_speed, full_text_service_url, refresh_interval
`

type CreateConfigParams struct {
	UseNaturalVoice    bool
	SpeechSpeed        float64
	FullTextServiceUrl sql.NullString
}

func (q *Queries) CreateConfig(ctx context.Context, arg CreateConfigParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, createConfig, arg.UseNaturalVoice, arg.SpeechSpeed, arg.FullTextServiceUrl)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.UseNaturalVoice,
		&i.SpeechSpeed,
		&i.FullTextServiceUrl,
		&i.RefreshInterval,
	)
	return i, err
}

const deleteConfig = `-- name: DeleteConfig :exec
DELETE FROM configs where id = ?
`

func (q *Queries) DeleteConfig(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteConfig, id)
	return err
}

const listConfigs = `-- name: ListConfigs :many
SELECT id, use_natural_voice, speech_speed, full_text_service_url, refresh_interval FROM configs
`

func (q *Queries) ListConfigs(ctx context.Context) ([]Config, error) {
	rows, err := q.db.QueryContext(ctx, listConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(
			&i.ID,
			&i.UseNaturalVoice,
			&i.SpeechSpeed,
			&i.FullTextServiceUrl,
			&i.RefreshInterval,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConfig = `-- name: UpdateConfig :exec
UPDATE configs
set use_natural_voice = ?,
speech_speed = ?,
full_text_service_url = ?
WHERE id = ? RETURNING id, use_natural_voice, speech_speed, full_text_service_url, refresh_interval
`

type UpdateConfigParams struct {
	UseNaturalVoice    bool
	SpeechSpeed        float64
	FullTextServiceUrl sql.NullString
	ID                 int64
}

func (q *Queries) UpdateConfig(ctx context.Context, arg UpdateConfigParams) error {
	_, err := q.db.ExecContext(ctx, updateConfig,
		arg.UseNaturalVoice,
		arg.SpeechSpeed,
		arg.FullTextServiceUrl,
		arg.ID,
	)
	return err
}
